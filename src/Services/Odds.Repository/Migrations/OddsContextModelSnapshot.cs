// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Odds.Repository.Context;

namespace Odds.Repository.Migrations
{
    [DbContext(typeof(OddsContext))]
    partial class OddsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Odds.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Guid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUser");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 7, 2, 21, 43, 10, 904, DateTimeKind.Utc).AddTicks(3901))
                        .HasColumnName("CreatedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Name");

                    b.Property<Guid?>("_parentGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("ParentGuid");

                    b.HasKey("Id");

                    b.HasIndex("_parentGuid");

                    b.ToTable("Category", "Odds");
                });

            modelBuilder.Entity("Odds.Domain.Entities.Competition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Guid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 7, 2, 21, 43, 10, 942, DateTimeKind.Utc).AddTicks(4150))
                        .HasColumnName("CreatedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("RegionGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Name");

                    b.Property<Guid>("_regionGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("Region");

                    b.HasKey("Id");

                    b.HasIndex("RegionGuid");

                    b.ToTable("Competition", "Odds");
                });

            modelBuilder.Entity("Odds.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Guid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 7, 2, 21, 43, 10, 953, DateTimeKind.Utc).AddTicks(9374))
                        .HasColumnName("CreatedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("LastModOn");

                    b.Property<Guid>("_categoryGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("Category");

                    b.Property<Guid>("_competitionGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("Competition");

                    b.Property<int>("_eventStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("EventStatus");

                    b.Property<string>("_label")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Label");

                    b.Property<DateTime>("_startTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("StartTime");

                    b.Property<Guid>("competitionGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("_categoryGuid");

                    b.HasIndex("_eventStatusId");

                    b.HasIndex("competitionGuid");

                    b.ToTable("Event", "Odds");
                });

            modelBuilder.Entity("Odds.Domain.Entities.EventStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("EventStatus", "Odds");
                });

            modelBuilder.Entity("Odds.Domain.Entities.Market", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Guid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 7, 2, 21, 43, 10, 961, DateTimeKind.Utc).AddTicks(5669))
                        .HasColumnName("CreatedDate");

                    b.Property<Guid>("EventGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("LastModOn");

                    b.Property<DateTime>("_endDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("Endtime");

                    b.Property<Guid>("_eventGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("Event");

                    b.Property<string>("_label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Label");

                    b.Property<int>("_marketStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("MarketStatus");

                    b.Property<Guid?>("_marketTemplate")
                        .HasColumnType("uuid")
                        .HasColumnName("MarketTemplate");

                    b.HasKey("Id");

                    b.HasIndex("EventGuid");

                    b.HasIndex("_marketStatusId");

                    b.ToTable("Market", "Odds");
                });

            modelBuilder.Entity("Odds.Domain.Entities.MarketStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("MarketStatus", "Odds");
                });

            modelBuilder.Entity("Odds.Domain.Entities.MarketTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Guid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 7, 2, 21, 43, 10, 965, DateTimeKind.Utc).AddTicks(6863))
                        .HasColumnName("CreatedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("LastModOn");

                    b.Property<string>("_friendlyName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("FriendlyName");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("MarketTemplate", "Odds");
                });

            modelBuilder.Entity("Odds.Domain.Entities.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Guid");

                    b.Property<Guid?>("CompetitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 7, 2, 21, 43, 10, 977, DateTimeKind.Utc).AddTicks(7718))
                        .HasColumnName("CreatedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("LastModOn");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("Participant", "Odds");
                });

            modelBuilder.Entity("Odds.Domain.Entities.ParticipantDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Guid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("LastModOn");

                    b.Property<string>("_description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<Guid>("_eventGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("EventId");

                    b.Property<int>("_index")
                        .HasColumnType("integer")
                        .HasColumnName("Index");

                    b.Property<Guid>("_participantGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("ParticipantId");

                    b.HasKey("Id");

                    b.HasIndex("_eventGuid");

                    b.HasIndex("_participantGuid");

                    b.ToTable("ParticipantDetail", "Odds");
                });

            modelBuilder.Entity("Odds.Domain.Entities.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Guid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 7, 2, 21, 43, 10, 982, DateTimeKind.Utc).AddTicks(8455))
                        .HasColumnName("CreatedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("LastModOn");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Region", "Odds");
                });

            modelBuilder.Entity("Odds.Domain.Entities.Selection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Guid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 7, 2, 21, 43, 10, 986, DateTimeKind.Utc).AddTicks(9507))
                        .HasColumnName("CreatedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("LastModOn");

                    b.Property<Guid>("MarketGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("_index")
                        .HasColumnType("integer")
                        .HasColumnName("Index");

                    b.Property<Guid>("_marketGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("MarketId");

                    b.Property<decimal>("_odds")
                        .HasColumnType("numeric")
                        .HasColumnName("Odds");

                    b.Property<string>("_participantLabel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ParticipantLabel");

                    b.HasKey("Id");

                    b.HasIndex("MarketGuid");

                    b.ToTable("Selection", "Odds");
                });

            modelBuilder.Entity("Odds.Domain.Entities.Category", b =>
                {
                    b.HasOne("Odds.Domain.Entities.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("_parentGuid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Odds.Domain.Entities.Competition", b =>
                {
                    b.HasOne("Odds.Domain.Entities.Region", null)
                        .WithMany("Competitions")
                        .HasForeignKey("RegionGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Odds.Domain.Entities.Event", b =>
                {
                    b.HasOne("Odds.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("_categoryGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Odds.Domain.Entities.EventStatus", "EventStatus")
                        .WithMany()
                        .HasForeignKey("_eventStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Odds.Domain.Entities.Competition", "Competition")
                        .WithMany("Events")
                        .HasForeignKey("competitionGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Competition");

                    b.Navigation("EventStatus");
                });

            modelBuilder.Entity("Odds.Domain.Entities.Market", b =>
                {
                    b.HasOne("Odds.Domain.Entities.Event", "Event")
                        .WithMany("Markets")
                        .HasForeignKey("EventGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Odds.Domain.Entities.MarketStatus", "MarketStatus")
                        .WithMany()
                        .HasForeignKey("_marketStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("MarketStatus");
                });

            modelBuilder.Entity("Odds.Domain.Entities.Participant", b =>
                {
                    b.HasOne("Odds.Domain.Entities.Competition", null)
                        .WithMany("Participants")
                        .HasForeignKey("CompetitionId");
                });

            modelBuilder.Entity("Odds.Domain.Entities.ParticipantDetail", b =>
                {
                    b.HasOne("Odds.Domain.Entities.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("_eventGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Odds.Domain.Entities.Participant", "Participant")
                        .WithMany("ParticipantDetails")
                        .HasForeignKey("_participantGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Odds.Domain.Entities.Region", b =>
                {
                    b.HasOne("Odds.Domain.Entities.Category", null)
                        .WithMany("Regions")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("Odds.Domain.Entities.Selection", b =>
                {
                    b.HasOne("Odds.Domain.Entities.Market", "Market")
                        .WithMany("Selection")
                        .HasForeignKey("MarketGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Market");
                });

            modelBuilder.Entity("Odds.Domain.Entities.Category", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Odds.Domain.Entities.Competition", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Odds.Domain.Entities.Event", b =>
                {
                    b.Navigation("Markets");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Odds.Domain.Entities.Market", b =>
                {
                    b.Navigation("Selection");
                });

            modelBuilder.Entity("Odds.Domain.Entities.Participant", b =>
                {
                    b.Navigation("ParticipantDetails");
                });

            modelBuilder.Entity("Odds.Domain.Entities.Region", b =>
                {
                    b.Navigation("Competitions");
                });
#pragma warning restore 612, 618
        }
    }
}
